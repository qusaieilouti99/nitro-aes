///
/// HybridAesNitroSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridAesNitroSpec.hpp"




namespace margelo::nitro::NitroAes {

  using namespace facebook;

  class JHybridAesNitroSpec: public jni::HybridClass<JHybridAesNitroSpec, JHybridObject>,
                             public virtual HybridAesNitroSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/NitroAes/HybridAesNitroSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridAesNitroSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridAesNitroSpec::TAG),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridAesNitroSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;

  public:
    inline const jni::global_ref<JHybridAesNitroSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    

  public:
    // Methods
    std::shared_ptr<Promise<std::string>> encrypt(const std::string& text, const std::string& key, const std::string& iv, Algorithms algorithm) override;
    std::shared_ptr<Promise<std::string>> decrypt(const std::string& ciphertext, const std::string& key, const std::string& iv, Algorithms algorithm) override;
    std::shared_ptr<Promise<std::string>> encryptFile(const std::string& key, const std::string& iv, const std::string& inputPath, const std::string& outputPath) override;
    std::shared_ptr<Promise<std::string>> decryptFile(const std::string& key, const std::string& iv, const std::string& hmacKey, const std::string& auth, const std::string& inputPath, const std::string& outputPath, double paddingSize) override;
    std::shared_ptr<Promise<std::string>> hmac256(const std::string& ciphertext, const std::string& key) override;
    std::shared_ptr<Promise<std::string>> hmac512(const std::string& ciphertext, const std::string& key) override;
    std::shared_ptr<Promise<std::string>> randomKey(double length) override;
    std::shared_ptr<Promise<std::string>> sha1(const std::string& text) override;
    std::shared_ptr<Promise<std::string>> sha256(const std::string& text) override;
    std::shared_ptr<Promise<std::string>> sha512(const std::string& text) override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridAesNitroSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::NitroAes

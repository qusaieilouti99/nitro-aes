///
/// HybridAesNitroSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridAesNitroSpec.hpp"

// Forward declaration of `HybridAesNitroSpec_cxx` to properly resolve imports.
namespace NitroAes { class HybridAesNitroSpec_cxx; }

// Forward declaration of `Algorithms` to properly resolve imports.
namespace margelo::nitro::NitroAes { enum class Algorithms; }

#include <NitroModules/Promise.hpp>
#include <string>
#include "Algorithms.hpp"

#include "NitroAes-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::NitroAes {

  /**
   * The C++ part of HybridAesNitroSpec_cxx.swift.
   *
   * HybridAesNitroSpecSwift (C++) accesses HybridAesNitroSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridAesNitroSpec_cxx can directly inherit from the C++ class HybridAesNitroSpec
   * to simplify the whole structure and memory management.
   */
  class HybridAesNitroSpecSwift: public virtual HybridAesNitroSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridAesNitroSpecSwift(const NitroAes::HybridAesNitroSpec_cxx& swiftPart):
      HybridObject(HybridAesNitroSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroAes::HybridAesNitroSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<std::string>> pbkdf2(const std::string& password, const std::string& salt, double cost, double length) override {
      auto __result = _swiftPart.pbkdf2(password, salt, std::forward<decltype(cost)>(cost), std::forward<decltype(length)>(length));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> encrypt(const std::string& text, const std::string& key, const std::string& iv, Algorithms algorithm) override {
      auto __result = _swiftPart.encrypt(text, key, iv, static_cast<int>(algorithm));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> decrypt(const std::string& ciphertext, const std::string& key, const std::string& iv, Algorithms algorithm) override {
      auto __result = _swiftPart.decrypt(ciphertext, key, iv, static_cast<int>(algorithm));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> encryptFile(const std::string& key, const std::string& iv, const std::string& hmacKey, const std::string& inputPath, const std::string& outputPath) override {
      auto __result = _swiftPart.encryptFile(key, iv, hmacKey, inputPath, outputPath);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> decryptFile(const std::string& key, const std::string& iv, const std::string& hmacKey, const std::string& auth, const std::string& inputPath, const std::string& outputPath, double paddingSize) override {
      auto __result = _swiftPart.decryptFile(key, iv, hmacKey, auth, inputPath, outputPath, std::forward<decltype(paddingSize)>(paddingSize));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> hmac256(const std::string& ciphertext, const std::string& key) override {
      auto __result = _swiftPart.hmac256(ciphertext, key);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> hmac512(const std::string& ciphertext, const std::string& key) override {
      auto __result = _swiftPart.hmac512(ciphertext, key);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> randomKey(double length) override {
      auto __result = _swiftPart.randomKey(std::forward<decltype(length)>(length));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> sha1(const std::string& text) override {
      auto __result = _swiftPart.sha1(text);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> sha256(const std::string& text) override {
      auto __result = _swiftPart.sha256(text);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> sha512(const std::string& text) override {
      auto __result = _swiftPart.sha512(text);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroAes::HybridAesNitroSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::NitroAes

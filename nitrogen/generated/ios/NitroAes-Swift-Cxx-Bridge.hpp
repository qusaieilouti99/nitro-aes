///
/// NitroAes-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `EncryptFileResult` to properly resolve imports.
namespace margelo::nitro::nitroaes { struct EncryptFileResult; }
// Forward declaration of `HybridNitroAesSpec` to properly resolve imports.
namespace margelo::nitro::nitroaes { class HybridNitroAesSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroAesSpec_cxx` to properly resolve imports.
namespace NitroAes { class HybridNitroAesSpec_cxx; }

// Include C++ defined types
#include "EncryptFileResult.hpp"
#include "HybridNitroAesSpec.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitroaes::bridge::swift {

  // pragma MARK: std::shared_ptr<Promise<std::string>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::string>>`.
   */
  using std__shared_ptr_Promise_std__string__ = std::shared_ptr<Promise<std::string>>;
  inline std::shared_ptr<Promise<std::string>> create_std__shared_ptr_Promise_std__string__() {
    return Promise<std::string>::create();
  }
  inline PromiseHolder<std::string> wrap_std__shared_ptr_Promise_std__string__(std::shared_ptr<Promise<std::string>> promise) {
    return PromiseHolder<std::string>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::string& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::string&)>`.
   */
  using Func_void_std__string = std::function<void(const std::string& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::string& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__string_Wrapper final {
  public:
    explicit Func_void_std__string_Wrapper(std::function<void(const std::string& /* result */)>&& func): _function(std::make_shared<std::function<void(const std::string& /* result */)>>(std::move(func))) {}
    inline void call(std::string result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const std::string& /* result */)>> _function;
  };
  Func_void_std__string create_Func_void_std__string(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__string_Wrapper wrap_Func_void_std__string(Func_void_std__string value) {
    return Func_void_std__string_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::make_shared<std::function<void(const std::exception_ptr& /* error */)>>(std::move(func))) {}
    inline void call(std::exception_ptr error) const {
      _function->operator()(error);
    }
  private:
    std::shared_ptr<std::function<void(const std::exception_ptr& /* error */)>> _function;
  };
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__exception_ptr_Wrapper wrap_Func_void_std__exception_ptr(Func_void_std__exception_ptr value) {
    return Func_void_std__exception_ptr_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<Promise<EncryptFileResult>>
  /**
   * Specialized version of `std::shared_ptr<Promise<EncryptFileResult>>`.
   */
  using std__shared_ptr_Promise_EncryptFileResult__ = std::shared_ptr<Promise<EncryptFileResult>>;
  inline std::shared_ptr<Promise<EncryptFileResult>> create_std__shared_ptr_Promise_EncryptFileResult__() {
    return Promise<EncryptFileResult>::create();
  }
  inline PromiseHolder<EncryptFileResult> wrap_std__shared_ptr_Promise_EncryptFileResult__(std::shared_ptr<Promise<EncryptFileResult>> promise) {
    return PromiseHolder<EncryptFileResult>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const EncryptFileResult& /* result */)>
  /**
   * Specialized version of `std::function<void(const EncryptFileResult&)>`.
   */
  using Func_void_EncryptFileResult = std::function<void(const EncryptFileResult& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const EncryptFileResult& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_EncryptFileResult_Wrapper final {
  public:
    explicit Func_void_EncryptFileResult_Wrapper(std::function<void(const EncryptFileResult& /* result */)>&& func): _function(std::make_shared<std::function<void(const EncryptFileResult& /* result */)>>(std::move(func))) {}
    inline void call(EncryptFileResult result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const EncryptFileResult& /* result */)>> _function;
  };
  Func_void_EncryptFileResult create_Func_void_EncryptFileResult(void* _Nonnull swiftClosureWrapper);
  inline Func_void_EncryptFileResult_Wrapper wrap_Func_void_EncryptFileResult(Func_void_EncryptFileResult value) {
    return Func_void_EncryptFileResult_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::nitroaes::HybridNitroAesSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::nitroaes::HybridNitroAesSpec>`.
   */
  using std__shared_ptr_margelo__nitro__nitroaes__HybridNitroAesSpec_ = std::shared_ptr<margelo::nitro::nitroaes::HybridNitroAesSpec>;
  std::shared_ptr<margelo::nitro::nitroaes::HybridNitroAesSpec> create_std__shared_ptr_margelo__nitro__nitroaes__HybridNitroAesSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__nitroaes__HybridNitroAesSpec_(std__shared_ptr_margelo__nitro__nitroaes__HybridNitroAesSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::nitroaes::HybridNitroAesSpec>
  using std__weak_ptr_margelo__nitro__nitroaes__HybridNitroAesSpec_ = std::weak_ptr<margelo::nitro::nitroaes::HybridNitroAesSpec>;
  inline std__weak_ptr_margelo__nitro__nitroaes__HybridNitroAesSpec_ weakify_std__shared_ptr_margelo__nitro__nitroaes__HybridNitroAesSpec_(const std::shared_ptr<margelo::nitro::nitroaes::HybridNitroAesSpec>& strong) { return strong; }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::string>>>
  using Result_std__shared_ptr_Promise_std__string___ = Result<std::shared_ptr<Promise<std::string>>>;
  inline Result_std__shared_ptr_Promise_std__string___ create_Result_std__shared_ptr_Promise_std__string___(const std::shared_ptr<Promise<std::string>>& value) {
    return Result<std::shared_ptr<Promise<std::string>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__string___ create_Result_std__shared_ptr_Promise_std__string___(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<std::string>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<EncryptFileResult>>>
  using Result_std__shared_ptr_Promise_EncryptFileResult___ = Result<std::shared_ptr<Promise<EncryptFileResult>>>;
  inline Result_std__shared_ptr_Promise_EncryptFileResult___ create_Result_std__shared_ptr_Promise_EncryptFileResult___(const std::shared_ptr<Promise<EncryptFileResult>>& value) {
    return Result<std::shared_ptr<Promise<EncryptFileResult>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_EncryptFileResult___ create_Result_std__shared_ptr_Promise_EncryptFileResult___(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<EncryptFileResult>>>::withError(error);
  }

} // namespace margelo::nitro::nitroaes::bridge::swift

///
/// HybridAesNitroSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Algorithms` to properly resolve imports.
namespace margelo::nitro::NitroAes { enum class Algorithms; }

#include <NitroModules/Promise.hpp>
#include <string>
#include "Algorithms.hpp"

namespace margelo::nitro::NitroAes {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `AesNitro`
   * Inherit this class to create instances of `HybridAesNitroSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridAesNitro: public HybridAesNitroSpec {
   * public:
   *   HybridAesNitro(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridAesNitroSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridAesNitroSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridAesNitroSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<Promise<std::string>> encrypt(const std::string& text, const std::string& key, const std::string& iv, Algorithms algorithm) = 0;
      virtual std::shared_ptr<Promise<std::string>> decrypt(const std::string& ciphertext, const std::string& key, const std::string& iv, Algorithms algorithm) = 0;
      virtual std::shared_ptr<Promise<std::string>> encryptFile(const std::string& key, const std::string& iv, const std::string& inputPath, const std::string& outputPath) = 0;
      virtual std::shared_ptr<Promise<std::string>> decryptFile(const std::string& key, const std::string& iv, const std::string& hmacKey, const std::string& auth, const std::string& inputPath, const std::string& outputPath, double paddingSize) = 0;
      virtual std::shared_ptr<Promise<std::string>> hmac256(const std::string& ciphertext, const std::string& key) = 0;
      virtual std::shared_ptr<Promise<std::string>> hmac512(const std::string& ciphertext, const std::string& key) = 0;
      virtual std::shared_ptr<Promise<std::string>> randomKey(double length) = 0;
      virtual std::shared_ptr<Promise<std::string>> sha1(const std::string& text) = 0;
      virtual std::shared_ptr<Promise<std::string>> sha256(const std::string& text) = 0;
      virtual std::shared_ptr<Promise<std::string>> sha512(const std::string& text) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "AesNitro";
  };

} // namespace margelo::nitro::NitroAes
